function Get-PSUADOPipeline {
    <#
    .SYNOPSIS
        Retrieves Azure DevOps pipelines with optional filtering by project, name, or ID.

    .DESCRIPTION
        Supports organization-wide or project-specific pipeline listing, with optional filtering
        by pipeline name or ID. Uses Azure DevOps REST API 7.2-preview.1.

    .PARAMETER Project
        Name of the Azure DevOps project. Required when filtering by PipelineName or PipelineId.

    .PARAMETER PipelineName
        Optional. Filters results to only include pipelines matching this name.

    .PARAMETER PipelineId
        Optional. Filters results to only include the pipeline with this ID.

    .PARAMETER Organization
        Azure DevOps organization name. Defaults to $env:ORGANIZATION.

    .PARAMETER PAT
        Personal Access Token. Defaults to $env:PAT.

    .OUTPUTS
        [PSCustomObject]

    .NOTES
        Author: Lakshmanachari Panuganti
        Updated: 2 August 2025 – Added filtering support for PipelineName and PipelineId
    #>

    [CmdletBinding(DefaultParameterSetName = 'All')]
    param (
        [Parameter(ParameterSetName = 'All')]
        [Parameter(ParameterSetName = 'ByProject')]
        [string]$Project,

        [Parameter(ParameterSetName = 'ByName', Mandatory)]
        [string]$PipelineName,

        [Parameter(ParameterSetName = 'ById', Mandatory)]
        [int]$PipelineId,

        [Parameter()]
        [string]$Organization = $env:ORGANIZATION,

        [Parameter()]
        [string]$PAT = $env:PAT
    )

    if (($PipelineName -or $PipelineId) -and -not $Project) {
        throw "When using -PipelineName or -PipelineId, the -Project parameter is required."
    }

    $PipelineList = [System.Collections.Generic.List[PSCustomObject]]::new()
    $headers = Get-PSUAdoAuthHeader -PAT $PAT

    $projectsToQuery = if ($Project) { @([PSCustomObject]@{ name = $Project }) } else {
        Write-Host "No project specified. Fetching pipelines across all accessible projects..." -ForegroundColor Yellow
        Get-PSUADOProjectList -Organization $Organization -PAT $PAT
    }

    foreach ($proj in $projectsToQuery) {
        try {
            Write-Host "→ Querying project: $($proj.name)" -ForegroundColor Cyan
            $uri = "https://dev.azure.com/$Organization/$($proj.name)/_apis/pipelines?api-version=7.2-preview.1"
            $response = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get

            foreach ($pipeline in $response.value) {
               $pipelineDetailsUrl = "https://dev.azure.com/$Organization/$projectName/_apis/pipelines/$($pipeline.id)?revision=$($pipeline.revision)&api-version=7.1-preview.1"
                $details = Invoke-RestMethod -Uri $pipelineDetailsUrl -Headers $Header -Method Get

                $PipelineList.Add([PSCustomObject]@{
                    Project               = $projectName
                    Id                    = $pipeline.id
                    Name                  = $pipeline.name
                    Folder                = $pipeline.folder
                    URL                   = $pipeline.url
                    Revision              = $pipeline.revision
                    CreatedDate           = $details.createdDate
                    CreatedBy             = $details.createdBy?.displayName
                    CreatedByEmail        = $details.createdBy?.uniqueName
                    PipelineType          = $details.configuration?.type
                    YamlPath              = $details.configuration?.path
                    RepositoryId          = $details.configuration?.repository?.id
                    RepositoryName        = $details.configuration?.repository?.name
                    RepositoryType        = $details.configuration?.repository?.type
                    RepositoryURL         = $details.configuration?.repository?.url
                    DefaultBranch         = $details.configuration?.repository?.defaultBranch
                    RepositoryCleanOption = $details.configuration?.repository?.clean
                    RepositoryFetchDepth  = $details.configuration?.repository?.fetchDepth
                    CheckoutSubmodules    = $details.configuration?.repository?.checkoutSubmodules
                })
            }
        }
        catch {
            if ($_.Exception.Message -notlike "*you do not have permissions*") {
                $PSCmdlet.ThrowTerminatingError($_)
            }
        }
    }

    return $PipelineList
}
